name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Run linting
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
    
    - name: Check code formatting with Black
      run: black --check .
      continue-on-error: true
    
    - name: Check import sorting with isort
      run: isort --check-only .
      continue-on-error: true
    
    - name: Lint with flake8
      run: flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  integration:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Generate sample data
      run: python etl/generate_data.py
    
    - name: Load data into warehouse
      run: python etl/load_data.py
    
    - name: Run analytics
      run: python analytics/run_analysis.py
    
    - name: Validate database
      run: |
        python -c "
        import duckdb
        import config
        con = duckdb.connect(str(config.get_db_path()))
        symbols = con.execute('SELECT COUNT(*) FROM symbols').fetchone()[0]
        bars = con.execute('SELECT COUNT(*) FROM bars').fetchone()[0]
        trades = con.execute('SELECT COUNT(*) FROM trades').fetchone()[0]
        print(f'Symbols: {symbols}, Bars: {bars}, Trades: {trades}')
        assert symbols > 0, 'No symbols loaded'
        assert bars > 0, 'No bars loaded'
        assert trades > 0, 'No trades loaded'
        con.close()
        "

